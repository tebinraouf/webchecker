context t_div { 
	constraint RowUnderContainer {
		guard : self.class.includes("row")
		check : self.parent.classes.includes("container")
		message : "row should be under container."
	}
	constraint ColUnderRow {
		guard : self.class.includes("col-sm-4")
		check : self.parent.classes.includes("row")
		message : "col-sm-4 divs should be contained under row."
	}
	constraint Media {
		guard : self.class.includes("media-body")
		check : self.parent.classes.includes("media")
		message : "media-body should be contained under media."
	}
}
context t_li {
	constraint NavItemUnderNav {
        guard : self.class.includes("nav-item")
        check : self.parent.classes.includes("nav")
        message : "nav-item should be contained under nav."
    }
}
context t_button { 
    constraint ScreenReaderButton {
        guard : self.class.includes("close")
        check : self.hasAttr("aria-label")
        message : "A button with class close should have aria-label defined for assistive technologies."
    }
}
context t_img { 
    constraint ImageInPictureWithImgClass {
        guard : self.parent.is("picture")
        check : self.class.includes("img-*")
        message : "img element in a picture element should have img-* class(es)"
    }
}
context t_table { 
    constraint HasCaption {
        guard : self.type.exists()
        check : self.type.hasChild("caption")
        message : "A table should have a caption tag for screen readers."
    }
}
context t_table { 
    constraint ResponsiveTable {
        guard : self.class.includes("table") and self.parent.is("div")
        check : self.parent.classes.includes("table-responsive-*")
        message : "A responsive table should have a parent div with table-responsive-* class(es)."
    }
}
context t_figcaption { 
	constraint ParentHasFigureClass {
		guard : self.type.exists()
		check : self.parent.classes.includes("figure") and self.class.includes("figure-caption")
		message : "A figcaption tag should have a figure parent with figure class and itself should have figure-caption class"
	}
}

context t_div { 
    constraint DIVWithAlertClass {
        guard : self.class.includes("alert") or self.class.includes("alert-*")
        check : self.hasAttr("role")
        message : "A div element with class alert or alert-* should have the role attribute defined for assistive technologies."
    }
    //a more strict constraint than above
    constraint DIVWithAlertClassAndSrOnly {
        guard : self.class.includes("alert") or self.class.includes("alert-*")
        check : self.hasAttr("role") and self.type.childrenHasClass("sr-only")
        message : "A div element with class alert or alert-* should have the role attribute and at least a child with sr-only class for assistive technologies."
    }
}
context t_a { 
    constraint AlertLinkInDivAlert {
        guard : self.hasClass("alert-link")
        check : self.parent.classes.includes("alert") and self.parent.classes.includes("alert-*")
        message : "An a tag with alert-link class should have a parent element with alert and alert-* class."
    }
}
context t_h4 { 
    constraint AlertHeadingInDivWithAlertClass {
        guard : self.class.includes("alert-heading")
        check : self.parent.classes.includes("alert") and self.parent.classes.includes("alert-*")
        message : "An h4 element (h*) with alert-heading class should have a parent element with alert and alert-* class."
    }
}
context t_h4 { 
    constraint AlertHeadingInDivWithAlertClasses {
        guard : self.class.includes("alert-heading")
        check : self.parent.hasClasses("alert alert-*") //hasClasses accept multiple classes separated by a space.
        message : "An h4 element (h*) with alert-heading class should have a parent element with alert and alert-* class."
    }
}
context t_button { 
    constraint DismissButtonRelation {
        guard : self.parent.hasClass("alert") and self.hasClass("close")
        check : self.hasAttr("data-dismiss")
        message : "A button in a div element with alert class should have a data-dismiss attribute."
    }
}
context t_span { 
    constraint BadgeClassSiblingRelation {
        guard   : self.class.includes("badge") and self.class.includes("badge-*")
        check   : self.type.previousSibling.hasClass("sr-only") or self.type.nextSibling.hasClass("sr-only")
        message : "A span element with badge and badge-* class should have an immediate sibling element with sr-only class for screen readers and assistive technologies."
    }
}
context t_ol { 
    constraint BreadcrumbArea {
        guard : self.class.includes("breadcrumb")
        check : self.parent.hasAttr("aria-label") and self.parent.is("nav")
        message : "An ol element with breadcrumb class should have 1) a parent element with aria-label attribute defined, and 2) the parent element should be a nav element (optional)."
    }
}
context t_li { 
    constraint LIActiveBreadcrumb {
        guard : self.class.includes("breadcrumb-item") and self.class.includes("active")
        check : self.hasAttr("aria-current")
        message : "An li element with breadcrumb-item and active class should define aria-current attribute."
    }
    constraint LIParentBreadcrumb {
        guard : self.class.includes("breadcrumb-item")
        check : self.parent.hasClass("breadcrumb")
        message : "An li element with breadcrumb-item should have a parent with breadcrumb class."
    }
}
context t_a { 
    constraint CheckBtnClass {
        guard : self.class.includes("btn")
        check : self.type.is("button") or (self.attr("role") == "button")
        message : "Warnning: btn classes are designed to be used with the <button> element. If they are used with <a> elements, the role attribute should be defined and the value should be button."
    }
}
context t_input { 
    constraint CheckBtnClass {
        guard : self.class.includes("btn")
        check : self.type.is("button")
        message : "Warnning: btn classes are designed to be used with the <button> element."
    }
}

context t_a { 
    constraint ActiveAElementWithBtnClass {
        guard : self.hasClass("btn") and self.hasClass("active") 
        check : (self.attr("aria-pressed") == "true")
        message : "An a element with btn and active classes should define aria-pressed attribute to true for assistive technologies."
    }
    constraint DisableAElementWithBtnClass {
        guard : self.hasClass("btn") and self.hasClass("disabled") 
        check : (self.attr("aria-disabled") == "true")
        message : "An a element with btn and disabled classes should define aria-disabled attribute to true for assistive technologies."
    }
    constraint DisableAElementWithBtnClassTabIndex {
        guard : self.hasClass("btn") and self.hasClass("disabled") 
        check : (self.attr("tabindex") == "-1")
        message : "An a element with btn and disabled classes should define tabindex attribute to -1 to prevent keyboard focus for sigted keyboard users and users of assistive technologies. Also, JS should be added to disable the link functionality."
    }
}
context t_div { 
    constraint BtnGroupToggle {
        guard : self.hasClass("btn-group-toggle")
        check : self.attr("data-toggle") == "buttons"
        message : "A div element with btn-group-toggle should define data-toggle attribute to buttons to make toggling the inputs work."
    }
    constraint InButtonGroup {
		guard : self.class.includes("btn-secondary")
		check : self.parent.classes.includes("btn-group")
		message : "btn-secondary divs should be contained under btn-group."
	}
}

context t_head {
    //<meta...>
    constraint metaTag {
        guard : self.type.exists()
        check : self.type.hasChild("meta")
        message : "The head element should include a meta tag"
    } 
    //W001
    //<meta charset="UTF-8">
    constraint charset {
        guard : self.type.hasChild("meta")
        //param1: tag name
        //param2: attribute name
        //param3: attribute value
        check : self.type.selector("meta", "charset", "UTF-8")
        message : "No meta tag with charset attribute was found in the head element of the document."
    }
    //W002
    //<meta http-equiv="X-UA-Compatible" content="ie=edge">
    constraint XUACompatibility {
        guard : self.type.hasChild("meta")
        check : self.type.selector("meta", "http-equiv", "X-UA-Compatible")
        message : "`<head>` is missing X-UA-Compatible `<meta>` tag that disables old IE compatibility modes"
    }
    //W003
    //<meta name="viewport" content="width=device-width, initial-scale=1.0">
    constraint Viewport {
        guard : self.type.hasChild("meta")
        check : self.type.selector("meta", "name", "viewport")
        message : "`<head>` is missing viewport `<meta>` tag that enables responsiveness"
    }
}
context t_head {
    //W005
    //<script...>
    constraint scriptTag {
        guard : self.type.exists()
        check : self.type.hasChild("script")
        message : "The head element should include a script tag for Bootstrap and jQuery scripts"
    }
    constraint jQuery {
        guard : self.type.hasChild("script")
        //param1: tag name
        //param2: attribute name
        //param3: string to be searched in attribute name
        check : self.type.contains("script", "src", "jquery")
        message : "To use Bootstrap's jQuery plugin, jQuery is required. "
    }
    constraint jQueryVersion {
        guard : self.type.hasChild("script")
        check : self.type.contains("script", "src", "3.3.1")
        message : "Bootstrap requires jQuery v1.9.0 or higher"
    }
    //W013
    constraint BootstrapCSSVersion {
        guard : self.type.hasChild("script")
        check : self.type.contains("link", "href", "4.1.3")
        message : "Bootstrap's latest version is 4.1.3 - CSS"
    }
    constraint BootstrapScriptVersion {
        guard : self.type.hasChild("script")
        check : self.type.contains("script", "src", "4.1.3")
        message : "Bootstrap's latest version is 4.1.3 - JS Script"
    }
}
//W006
context t_button { 
    constraint TooltipsDisabledButton {
        guard : (self.attr("data-toggle") == "tooltip") or (self.attr("data-toggle") == "popover") 
        check : not self.type.hasAttr("disabled")
        message : "Tooltips and popovers on disabled elements cannot be triggered by user interaction unless the element becomes enabled. To have tooltips and popovers be triggerable by the user even when their associated element is disabled, put the disabled element inside a wrapper <div> and apply the tooltip or popover to the wrapper <div> instead."
    }
}
//W007
context t_button { 
    constraint ButtonMissingType {
        guard : self.type.exists()
        check : self.hasAttr("type")
        message : "Buttons should have a type attribute. Read more at http://wtfhtmlcss.com/#buttons-type"
    }
}
//W008
context t_button { 
    constraint TooltipsInBtnGroup {
        guard : ((self.attr("data-toggle") == "tooltip") or (self.attr("data-toggle") == "popover")) and self.parent.hasClass("btn-group")
        check : (self.attr("data-container") == "body")
        message : "Tooltips and popovers within button groups should have their `container` set to `\'body\'`."
    }
}
//W009
context t_div { 
    constraint EmptySpace {
        guard : self.type.exists()
        check : self.type.isEmpty()
        message : "Div is empty. Try removing it."
    }
}
context t_div { 
    constraint EmptySpace {
        guard : self.type.previousSibling.is("div") or self.type.nextSibling.is("div")
        check : self.type.isEmpty()
        message : "Instead of using an empty column just to occupy space and push the next column further to the right, you can just use Bootstrap's .col-*-offset-* classes"
    }
}
//W012
context t_div { 
    constraint NavbarFirstChild {
        guard : self.type.hasClass("navbar")
        check : self.type.children.hasClass("container") or self.type.children.hasClass("container-fluid")
        message : ".navbar's first child element should always be either .container or .container-fluid"
    }
}
//W014
context t_a { 
    constraint CarouselControls {
        guard : self.class.includes("carousel-control-prev") or self.class.includes("carousel-control-next")
        check : self.parent.hasClass("carousel") and self.type.hasAttr("href") or self.type.hasAttr("data-target")
        message : "Carousel controls and indicators should have a parent div element with class caraousel and use `href` or `data-target` to reference an element with class `.carousel`."
    }
}
//W016
context t_button { 
    constraint DisabledButton {
        guard : self.class.includes("disabled")
        check : self.type.hasAttr("disabled")
        message : "Using the `.disabled` class on a `<button>` only changes the appearance of the element. It doesn't prevent the user from interacting with the element (for example, clicking on it or focusing it). If you want to truly disable the element, use the `disabled` attribute instead."
    }
}
context t_input { 
    constraint DisabledButton {
        guard : self.class.includes("disabled")
        check : self.type.hasAttr("disabled")
        message : "Using the `.disabled` class on a `<input />` only changes the appearance of the element. It doesn't prevent the user from interacting with the element (for example, clicking on it or focusing it). If you want to truly disable the element, use the `disabled` attribute instead."
    }
}
//W017
context t_input { 
    constraint InputMissingType {
        guard : self.type.exists()
        check : self.type.hasAttr("type")
        message : "It's best-practice to always set an explicit type on <input>s. If an <input> lacks a type attribute, it defaults to being a type='text'"
    }
}
